falco:
  syslog_output:
    enabled: false
  file_output:
    enabled: true
    keep_alive: true
    filename: /tmp/falco-alerts/alerts.txt

collectors:
  containerd:
    socket: /run/k3s/containerd/containerd.sock

extra:
  args: 
  - -U

mounts:
  volumes:
  - hostPath:
      path: "/root/falco-alerts"
      type: ""
    name: "falco-alerts"
  volumeMounts:
  - mountPath: "/tmp/falco-alerts"
    name: "falco-alerts"
    readOnly: false
    
customRules:
  custom_rules_from_default.yaml: |-

    - rule: Read sensitive file untrusted
      desc: >
        an attempt to read any sensitive file (e.g. files containing user/password/authentication
        information). Exceptions are made for known trusted programs.
      condition: >
        sensitive_files and open_read
        and proc_name_exists
        and not proc.name in (user_mgmt_binaries, userexec_binaries, package_mgmt_binaries,
        cron_binaries, read_sensitive_file_binaries, shell_binaries, hids_binaries,
        vpn_binaries, mail_config_binaries, nomachine_binaries, sshkit_script_binaries,
        in.proftpd, mandb, salt-minion, postgres_mgmt_binaries,
        google_oslogin_
        )
        and not cmp_cp_by_passwd
        and not ansible_running_python
        and not run_by_qualys
        and not run_by_chef
        and not run_by_google_accounts_daemon
        and not user_read_sensitive_file_conditions
        and not mandb_postinst
        and not perl_running_plesk
        and not perl_running_updmap
        and not veritas_driver_script
        and not perl_running_centrifydc
        and not runuser_reading_pam
        and not linux_bench_reading_etc_shadow
        and not user_known_read_sensitive_files_activities
        and not user_read_sensitive_file_containers
      output: >
        Sensitive file opened for reading by non-trusted program (user=%user.name user_loginuid=%user.loginuid program=%proc.name
        command=%proc.cmdline file=%fd.name parent=%proc.pname gparent=%proc.aname[2] ggparent=%proc.aname[3] gggparent=%proc.aname[4] container_id=%container.id image=%container.image.repository)
      priority: WARNING
      tags: [filesystem, mitre_credential_access, mitre_discovery]


    - rule: Run shell untrusted
      desc: an attempt to spawn a shell below a non-shell application. Specific applications are monitored.
      condition: >
        spawned_process
        and shell_procs
        and proc.pname exists
        and protected_shell_spawner
        and not proc.pname in (shell_binaries, gitlab_binaries, cron_binaries, user_known_shell_spawn_binaries,
                              needrestart_binaries,
                              mesos_shell_binaries,
                              erl_child_setup, exechealthz,
                              PM2, PassengerWatchd, c_rehash, svlogd, logrotate, hhvm, serf,
                              lb-controller, nvidia-installe, runsv, statsite, erlexec, calico-node,
                              "puma reactor")
        and not proc.cmdline in (known_shell_spawn_cmdlines)
        and not proc.aname in (unicorn_launche)
        and not consul_running_net_scripts
        and not consul_running_alert_checks
        and not nginx_starting_nginx
        and not nginx_running_aws_s3_cp
        and not run_by_package_mgmt_binaries
        and not serf_script
        and not check_process_status
        and not run_by_foreman
        and not python_mesos_marathon_scripting
        and not splunk_running_forwarder
        and not postgres_running_wal_e
        and not redis_running_prepost_scripts
        and not rabbitmq_running_scripts
        and not rabbitmqctl_running_scripts
        and not run_by_appdynamics
        and not user_shell_container_exclusions
      output: >
        Shell spawned by untrusted binary (user=%user.name user_loginuid=%user.loginuid shell=%proc.name parent=%proc.pname
        cmdline=%proc.cmdline pcmdline=%proc.pcmdline gparent=%proc.aname[2] ggparent=%proc.aname[3]
        aname[4]=%proc.aname[4] aname[5]=%proc.aname[5] aname[6]=%proc.aname[6] aname[7]=%proc.aname[7] container_id=%container.id image=%container.image.repository)
      priority: DEBUG
      tags: [shell, mitre_execution]


    - rule: Write below etc
      desc: an attempt to write to any file below /etc
      condition: write_etc_common
      output: "File below /etc opened for writing (user=%user.name user_loginuid=%user.loginuid command=%proc.cmdline parent=%proc.pname pcmdline=%proc.pcmdline file=%fd.name program=%proc.name gparent=%proc.aname[2] ggparent=%proc.aname[3] gggparent=%proc.aname[4] container_id=%container.id image=%container.image.repository)"
      priority: ERROR
      tags: [filesystem, mitre_persistence]

